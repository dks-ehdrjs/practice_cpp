// 선택정렬
#include<iostream>

using namespace std;

void selectionSort(int* arr, int size);

int main() {
	int arr[5] = { 3, 1, 4, 1, 5  };
	selectionSort(arr, 5);

	for (int n : arr) {
		cout << n << " ";
	}
}

void selectionSort(int* arr, int size){
	int i, j, minIdx, tmp;

	for (i = 0; i < size - 1; i++){ // 정렬의 기준
		minIdx = i;  // 인덱스 0부터 시작
		for (j = i + 1; j < size; j++){ // 정렬의 기준 인덱스를 제외한 나머지 인덱스들과 비교
			if (arr[minIdx] > arr[j]) // minIdx보다 작은 값이 존재하면
				minIdx = j; // 그 작은 값을 저장
		}
		tmp = arr[i];
		arr[i] = arr[minIdx];
		arr[minIdx] = tmp; // minIdx와 arr[i]의 값 바꾸기
	}
}

// 삽입 정렬
#include<iostream>

using namespace std;

void insertSort(int* arr, int size);

int main()
{
	int arr[5] = { 3,1,4,1,5 };
	insertSort(arr, 5);

	for (int n : arr) {
		cout << n << " ";
	}
}

void insertSort(int* arr, int size){
	int i, j, tmp;
	for (i = 1; i < size; i++){ // 정렬 기준
		tmp = arr[i]; // 인덱스1부터 비교 시작
		for (j = i; j > 0 && arr[j - 1] > tmp; j--) {
			arr[j] = arr[j - 1]; // 뒤로 미루기
		}
		arr[j] = tmp; // 범위 안에 안들어가면 빠져 나와서 현재 인덱스에 tmp 저장
	}
}

// 버블 정렬
#include<iostream>

using namespace std;

void bubbleSort(int* arr, int size);

int main() {
	int arr[5] = { 3,1,4,1,5 };
	bubbleSort(arr, 5);

	for (int n : arr) {
		cout << n << " ";
	}
}

void bubbleSort(int* arr, int size){
	int i, j, tmp;
	for (i = 0; i < size - 1; i++) {
		for (j = 0; j < size - 1 - i; j++) { // 비교 횟수
			if (arr[j] > arr[j + 1]) {
				tmp = arr[j];
				arr[j] = arr[j + 1];
				arr[j + 1] = tmp;
			}
		}
	}
}

